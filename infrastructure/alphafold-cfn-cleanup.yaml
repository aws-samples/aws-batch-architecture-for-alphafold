# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Clean up residual stack resources

Parameters:
  # S3Bucket:
  #   Description: S3 Bucket
  #   Type: String
  FoldingContainerRepo:
    Description: ECR repo for folding container
    Type: String
  DownloadContainerRepo:
    Description: ECR repo for download container
    Type: String    

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        # - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # DeleteBucketLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       ZipFile: |
  #         import logging          
  #         import cfnresponse
  #         import boto3

  #         LOGGER = logging.getLogger()
  #         LOGGER.setLevel(logging.INFO)

  #         def lambda_handler(event, context):
  #             try:
  #                 LOGGER.info('REQUEST RECEIVED:\n %s', event)
  #                 LOGGER.info('REQUEST RECEIVED:\n %s', context)
  #                 if event['RequestType'] == 'Create':
  #                     LOGGER.info('CREATE!')
  #                     cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource creation successful!"})
  #                 elif event['RequestType'] == 'Update':
  #                     LOGGER.info('UPDATE!')
  #                     cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource update successful!"})
  #                 elif event['RequestType'] == 'Delete':
  #                     LOGGER.info('DELETE!')
  #                     s3 = boto3.resource('s3')
  #                     bucket_name = event['ResourceProperties']['S3Bucket']
  #                     bucket = s3.Bucket(bucket_name)
  #                     object_deletion_response = bucket.object_versions.all().delete()
  #                     LOGGER.info(f"Object deletion response:\n{object_deletion_response}")
  #                     bucket_deletion_response = bucket.delete()
  #                     LOGGER.info(f"Bucket deletion response:\n{bucket_deletion_response}")
  #                     cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource deletion successful!"})
  #                 else:
  #                     LOGGER.info('FAILED!')
  #                     cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Unexpected event received from CloudFormation"})
  #             except: 
  #                 LOGGER.info('FAILED!')
  #                 cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Exception during processing"})

  #     Description: Delete S3 bucket
  #     Handler: index.lambda_handler
  #     MemorySize: 512
  #     Role:
  #       Fn::GetAtt: LambdaExecutionRole.Arn
  #     Runtime: python3.8
  #     Timeout: 10

  # DeleteBucket:
  #   Type: Custom::ResourceForDeletingBuckets
  #   Properties:
  #     ServiceToken:
  #       Fn::GetAtt: DeleteBucketLambda.Arn
  #     S3Bucket:
  #       Ref: S3Bucket

  ##########################################

  DeleteContainerRepoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import logging          
          import cfnresponse
          import boto3

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource creation successful!"})
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource update successful!"})
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      ecr = boto3.client('ecr')
                      repo_name = event['ResourceProperties']['ContainerRepo']
                      repo_deletion_response = ecr.delete_repository(
                        repositoryName=repo_name,
                        force=True
                        )
                      LOGGER.info(f"Repo deletion response:\n{repo_deletion_response}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource deletion successful!"})
                  else:
                      LOGGER.info('FAILED!')
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Unexpected event received from CloudFormation"})
              except: 
                  LOGGER.info('FAILED!')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Exception during processing"})

      Description: Delete ECR repository
      Handler: index.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 10

  DeleteFoldingContainerRepo:
    Type: Custom::ResourceForDeletingECR
    Properties:
      ServiceToken:
        Fn::GetAtt: DeleteContainerRepoLambda.Arn
      ContainerRepo:
        Ref: FoldingContainerRepo

  DeleteDownloadContainerRepo:
    Type: Custom::ResourceForDeletingECR
    Properties:
      ServiceToken:
        Fn::GetAtt: DeleteContainerRepoLambda.Arn
      ContainerRepo:
        Ref: DownloadContainerRepo        
